apiVersion: v1
kind: Namespace
metadata:
  name: geospatial-platform
---
# PostgreSQL with PostGIS
apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: geospatial-platform
spec:
  ports:
    - port: 5432
  selector:
    app: postgres
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: geospatial-platform
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
        - name: postgres
          image: postgis/postgis:14-3.3
          ports:
            - containerPort: 5432
          env:
            - name: POSTGRES_DB
              value: geospatial_db
            - name: POSTGRES_USER
              value: postgres
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgres-secret
                  key: password
          volumeMounts:
            - name: postgres-storage
              mountPath: /var/lib/postgresql/data
            - name: init-scripts
              mountPath: /docker-entrypoint-initdb.d
      volumes:
        - name: postgres-storage
          persistentVolumeClaim:
            claimName: postgres-pvc
        - name: init-scripts
          configMap:
            name: postgres-init
---
# Backend Service
apiVersion: v1
kind: Service
metadata:
  name: backend
  namespace: geospatial-platform
spec:
  type: LoadBalancer
  ports:
    - port: 5000
      targetPort: 5000
  selector:
    app: backend
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend
  namespace: geospatial-platform
spec:
  replicas: 3
  selector:
    matchLabels:
      app: backend
  template:
    metadata:
      labels:
        app: backend
    spec:
      containers:
        - name: backend
          image: geospatial-backend:latest
          ports:
            - containerPort: 5000
          env:
            - name: DATABASE_URL
              value: postgres://postgres:postgres@postgres:5432/geospatial_db
            - name: JWT_SECRET
              valueFrom:
                secretKeyRef:
                  name: app-secrets
                  key: jwt-secret
            - name: AI_SERVICE_URL
              value: http://ai-service:8000
          resources:
            requests:
              memory: "512Mi"
              cpu: "500m"
            limits:
              memory: "1Gi"
              cpu: "1000m"
---
# AI Service
apiVersion: v1
kind: Service
metadata:
  name: ai-service
  namespace: geospatial-platform
spec:
  ports:
    - port: 8000
      targetPort: 8000
  selector:
    app: ai-service
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ai-service
  namespace: geospatial-platform
spec:
  replicas: 2
  selector:
    matchLabels:
      app: ai-service
  template:
    metadata:
      labels:
        app: ai-service
    spec:
      containers:
        - name: ai-service
          image: geospatial-ai:latest
          ports:
            - containerPort: 8000
          env:
            - name: CUDA_VISIBLE_DEVICES
              value: "0"
          resources:
            requests:
              memory: "4Gi"
              cpu: "2000m"
              nvidia.com/gpu: 1
            limits:
              memory: "8Gi"
              cpu: "4000m"
              nvidia.com/gpu: 1
---
# Frontend Service
apiVersion: v1
kind: Service
metadata:
  name: frontend
  namespace: geospatial-platform
spec:
  type: LoadBalancer
  ports:
    - port: 80
      targetPort: 3000
  selector:
    app: frontend
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
  namespace: geospatial-platform
spec:
  replicas: 3
  selector:
    matchLabels:
      app: frontend
  template:
    metadata:
      labels:
        app: frontend
    spec:
      containers:
        - name: frontend
          image: geospatial-frontend:latest
          ports:
            - containerPort: 3000
          env:
            - name: REACT_APP_API_URL
              value: http://backend:5000
            - name: REACT_APP_AI_SERVICE_URL
              value: http://ai-service:8000
          resources:
            requests:
              memory: "256Mi"
              cpu: "250m"
            limits:
              memory: "512Mi"
              cpu: "500m"
---
# Persistent Volume Claim for PostgreSQL
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
  namespace: geospatial-platform
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 50Gi
---
# Secrets
apiVersion: v1
kind: Secret
metadata:
  name: postgres-secret
  namespace: geospatial-platform
type: Opaque
data:
  password: cG9zdGdyZXM= # base64 encoded "postgres"
---
apiVersion: v1
kind: Secret
metadata:
  name: app-secrets
  namespace: geospatial-platform
type: Opaque
data:
  jwt-secret: eW91ci1zZWNyZXQta2V5LWNoYW5nZS1pbi1wcm9kdWN0aW9u # base64 encoded
---
# ConfigMap for PostgreSQL init scripts
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-init
  namespace: geospatial-platform
data:
  init.sql: |
    -- Init script will be mounted here
---
# Horizontal Pod Autoscaler for Backend
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: backend-hpa
  namespace: geospatial-platform
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: backend
  minReplicas: 2
  maxReplicas: 10
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 70
    - type: Resource
      resource:
        name: memory
        target:
          type: Utilization
          averageUtilization: 80
---
# Horizontal Pod Autoscaler for Frontend
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: frontend-hpa
  namespace: geospatial-platform
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: frontend
  minReplicas: 2
  maxReplicas: 10
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 70
